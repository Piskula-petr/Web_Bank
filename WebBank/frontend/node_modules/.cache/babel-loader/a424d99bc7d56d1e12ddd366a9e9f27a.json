{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MSI\\\\Dropbox\\\\Git\\\\Web_Bank\\\\WebBank\\\\frontend\\\\src\\\\newPayment\\\\NewPayment.js\";\nimport React, { Component, createRef } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport \"../css/newPayment.css\";\nimport payment from \"../images/payment.png\"; // Komponenty\n\nimport NavigationPanel from \"../NavigationPanel\";\nimport TableSeparator from \"./TableSeparator\";\nimport InputPanel from \"./InputPanel\";\nimport InputPanelWithCurrencies from \"./InputPanelWithCurrencies\";\nimport InputPanelExchangeRate from \"./InputPanelExchangeRate\";\nimport InputPanelWithBankCode from \"./InputPanelWithBankCode\";\nimport InputPanelWithConfirmation from \"./InputPanelWithConfirmation\";\nexport default class NewPayment extends Component {\n  // Konstruktor /////////////////////////////////////////////////////////////////////\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Parametry nové platby\n      payment: {\n        userID: this.props.userID,\n        name: \"\",\n        mark: \"-\",\n        accountNumber: \"\",\n        amount: 0,\n        currency: \"CZK\",\n        variableSymbol: 0,\n        constantSymbol: 0,\n        specificSymbol: 0,\n        paymentDate: new Date(),\n        paymentType: \"Platba bankovním převodem\"\n      },\n      // Zadaná částka\n      amountInput: 0,\n      // Úspěšná platba\n      successfulPayment: false,\n      // Chybové zprávy\n      nameError: \"\",\n      accountNumberError: \"\",\n      amountError: \"\",\n      variableSymbolError: \"\",\n      constantSymbolError: \"\",\n      specificSymbolError: \"\",\n      confirmationError: \"\",\n      // Prefix čísla účtu\n      accountNumberPrefix: \"\",\n      // Bankovní kód\n      bankCode: \"\",\n      // Zobrazení výběru bankovních kódů\n      bankCodeSelection: false,\n      // Směnný kurz na CZK\n      exchangeRateToCZK: 1,\n      // Vygenerování 5 místného potvzovacího kódu\n      confirmationGenerated: Math.floor(Math.random() * (99999 - 10000 + 1) + 10000),\n      // Zadaný ověřovací kód\n      confirmationInput: \"\"\n    };\n    this.confirmationInputRef = createRef();\n    this.setBankCode = this.setBankCode.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  } // Změna titulku stránky ///////////////////////////////////////////////////////////\n\n\n  componentDidMount() {\n    document.title = \"Nová platba | Web Bank\";\n  } // Změna stavu bankovního kódu /////////////////////////////////////////////////////\n\n\n  setBankCode(event) {\n    // Skryje / zobrazí bankovní kódy + nastavení kódu při výběru\n    if (event.target.id === \"bankCode\") {\n      this.setState({\n        bankCode: event.target.attributes.name.value,\n        bankCodeSelection: !this.state.bankCodeSelection\n      }); // Skryje / zobrazí bankovní kódy\n    } else {\n      this.setState({\n        bankCodeSelection: !this.state.bankCodeSelection\n      });\n    }\n  } // Odeslání formuláře /////////////////////////////////////////////////////////////\n\n\n  handleSubmit(event) {\n    event.preventDefault(); // Vynulování zadaného ověřovacího kódu\n\n    this.confirmationInputRef.current.value = \"\";\n    const confirmationGenerated = this.state.confirmationGenerated;\n    const confirmationInput = parseInt(this.state.confirmationInput); // Složení bankovního účtu\n\n    const accountNumber = this.state.accountNumberPrefix + \"/\" + this.state.bankCode; // Přepočet na CZK\n\n    const amountInCZK = (this.state.amountInput * this.state.exchangeRateToCZK).toFixed(2);\n    this.setState({\n      payment: { ...this.state.payment,\n        accountNumber: accountNumber,\n        amount: amountInCZK\n      }\n    }, () => {\n      // Odeslání nové platby\n      fetch(\"http://localhost:8080/api/new-payment\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(this.state.payment)\n      }).then(response => response.json().then(data => {\n        // Response - OK\n        if (response.ok && confirmationGenerated === confirmationInput) {\n          this.setState({\n            successfulPayment: true\n          }); // Response - Bad Request\n        } else {\n          // Nastavení chybové zprávy, při neshodě ověřovacího kódu\n          let confirmationError = \"\";\n\n          if (confirmationGenerated !== confirmationInput) {\n            confirmationError = \"Ověřovací kód není správný\";\n          } // Nastavení chybové zprávy, při nevybrání bankovního kódu\n\n\n          let accountNumberError = data.accountNumber;\n\n          if (this.state.payment.accountNumber.length >= 10 && this.state.bankCode === \"\") {\n            accountNumberError = \"Kód banky musí být zadán\";\n          } // Změna stavu chybových zpráv\n\n\n          this.setState({\n            nameError: data.name,\n            accountNumberError: accountNumberError,\n            amountError: data.amount,\n            variableSymbolError: data.variableSymbol,\n            constantSymbolError: data.constantSymbol,\n            specificSymbolError: data.specificSymbol,\n            confirmationError: confirmationError,\n            // Vygenerování nového kódu\n            confirmationGenerated: Math.floor(Math.random() * (99999 - 10000 + 1) + 10000)\n          });\n        }\n      }));\n    });\n  } // Změna stavu vstupních údajů /////////////////////////////////////////////////////\n\n\n  handleChange(event) {\n    const name = event.target.name;\n    let value = event.target.value; // Uložení stavu do pomocných proměnných\n\n    if (name === \"accountNumberPrefix\" || name === \"confirmationInput\" || name === \"amountInput\") {\n      // Změna desetinné značky (častka platby)\n      if (value.includes(\",\")) {\n        value = value.replace(\",\", \".\");\n      }\n\n      this.setState({\n        [name]: value\n      });\n    } else {\n      // Získání směnného kurzu vybrané měny\n      if (name === \"currency\") {\n        // Request - vrací seznam aktuálních kurzů\n        fetch(\"https://api.exchangeratesapi.io/latest?base=\" + value).then(response => response.json().then(data => this.setState({\n          exchangeRateToCZK: data.rates.CZK\n        })));\n      }\n\n      this.setState({\n        payment: { ...this.state.payment,\n          [name]: value\n        }\n      });\n    }\n  } // Vykreslení /////////////////////////////////////////////////////////////////////\n\n\n  render() {\n    // Přesměrování na stránku přehledu\n    if (this.state.successfulPayment) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/prehled\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/MSI/Dropbox/Git/Web_Bank/WebBank/frontend/src/newPayment/NewPayment.js"],"names":["React","Component","createRef","Redirect","payment","NavigationPanel","TableSeparator","InputPanel","InputPanelWithCurrencies","InputPanelExchangeRate","InputPanelWithBankCode","InputPanelWithConfirmation","NewPayment","constructor","props","state","userID","name","mark","accountNumber","amount","currency","variableSymbol","constantSymbol","specificSymbol","paymentDate","Date","paymentType","amountInput","successfulPayment","nameError","accountNumberError","amountError","variableSymbolError","constantSymbolError","specificSymbolError","confirmationError","accountNumberPrefix","bankCode","bankCodeSelection","exchangeRateToCZK","confirmationGenerated","Math","floor","random","confirmationInput","confirmationInputRef","setBankCode","bind","handleSubmit","handleChange","componentDidMount","document","title","event","target","id","setState","attributes","value","preventDefault","current","parseInt","amountInCZK","toFixed","fetch","method","headers","body","JSON","stringify","then","response","json","data","ok","length","includes","replace","rates","CZK","render"],"mappings":"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","sourcesContent":["import React, {Component, createRef} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport \"../css/newPayment.css\";\r\nimport payment from \"../images/payment.png\";\r\n\r\n// Komponenty\r\nimport NavigationPanel from \"../NavigationPanel\";\r\nimport TableSeparator from \"./TableSeparator\";\r\nimport InputPanel from \"./InputPanel\";\r\nimport InputPanelWithCurrencies from \"./InputPanelWithCurrencies\";\r\nimport InputPanelExchangeRate from \"./InputPanelExchangeRate\";\r\nimport InputPanelWithBankCode from \"./InputPanelWithBankCode\";\r\nimport InputPanelWithConfirmation from \"./InputPanelWithConfirmation\";\r\n\r\nexport default class NewPayment extends Component {\r\n\r\n// Konstruktor /////////////////////////////////////////////////////////////////////\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n            // Parametry nové platby\r\n            payment: {\r\n                userID: this.props.userID,\r\n                name: \"\",\r\n                mark: \"-\",\r\n                accountNumber: \"\",\r\n                amount: 0,\r\n                currency: \"CZK\",\r\n                variableSymbol: 0,\r\n                constantSymbol: 0,\r\n                specificSymbol: 0,\r\n                paymentDate: new Date(),\r\n                paymentType: \"Platba bankovním převodem\",\r\n            },\r\n\r\n            // Zadaná částka\r\n            amountInput: 0,\r\n\r\n            // Úspěšná platba\r\n            successfulPayment : false,\r\n\r\n            // Chybové zprávy\r\n            nameError: \"\",\r\n            accountNumberError: \"\",\r\n            amountError: \"\",\r\n            variableSymbolError: \"\",\r\n            constantSymbolError: \"\",\r\n            specificSymbolError: \"\",\r\n            confirmationError: \"\",\r\n\r\n            // Prefix čísla účtu\r\n            accountNumberPrefix: \"\",\r\n\r\n            // Bankovní kód\r\n            bankCode: \"\",\r\n\r\n            // Zobrazení výběru bankovních kódů\r\n            bankCodeSelection: false,\r\n\r\n            // Směnný kurz na CZK\r\n            exchangeRateToCZK: 1,\r\n\r\n            // Vygenerování 5 místného potvzovacího kódu\r\n            confirmationGenerated: Math.floor(Math.random() * (99999 - 10000 + 1) + 10000),\r\n\r\n            // Zadaný ověřovací kód\r\n            confirmationInput: \"\",\r\n        }\r\n\r\n        this.confirmationInputRef = createRef();\r\n        this.setBankCode = this.setBankCode.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n// Změna titulku stránky ///////////////////////////////////////////////////////////\r\n\r\n    componentDidMount() {\r\n        document.title = \"Nová platba | Web Bank\";\r\n    }\r\n\r\n// Změna stavu bankovního kódu /////////////////////////////////////////////////////\r\n\r\n    setBankCode(event) {\r\n\r\n        // Skryje / zobrazí bankovní kódy + nastavení kódu při výběru\r\n        if (event.target.id === \"bankCode\") {\r\n\r\n            this.setState({\r\n                bankCode: event.target.attributes.name.value,\r\n                bankCodeSelection: !this.state.bankCodeSelection,\r\n            });\r\n\r\n        // Skryje / zobrazí bankovní kódy\r\n        } else {\r\n\r\n            this.setState({\r\n                bankCodeSelection: !this.state.bankCodeSelection,\r\n            });\r\n        }\r\n    }\r\n\r\n// Odeslání formuláře /////////////////////////////////////////////////////////////\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        // Vynulování zadaného ověřovacího kódu\r\n        this.confirmationInputRef.current.value = \"\";\r\n\r\n        const confirmationGenerated = this.state.confirmationGenerated;\r\n        const confirmationInput = parseInt(this.state.confirmationInput)\r\n\r\n        // Složení bankovního účtu\r\n        const accountNumber = this.state.accountNumberPrefix + \"/\" + this.state.bankCode;\r\n\r\n        // Přepočet na CZK\r\n        const amountInCZK = (this.state.amountInput * this.state.exchangeRateToCZK).toFixed(2);\r\n\r\n        this.setState({\r\n\r\n            payment: {\r\n                ...this.state.payment,\r\n                accountNumber: accountNumber,\r\n                amount: amountInCZK,\r\n            }\r\n        }, () => {\r\n\r\n            // Odeslání nové platby\r\n            fetch(\"http://localhost:8080/api/new-payment\", {\r\n\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n\r\n                body: JSON.stringify(this.state.payment),\r\n\r\n            }).then(response => response.json().then(data => {\r\n\r\n                // Response - OK\r\n                if (response.ok && confirmationGenerated === confirmationInput) {\r\n\r\n                    this.setState({\r\n                        successfulPayment: true,\r\n                    });\r\n\r\n                // Response - Bad Request\r\n                } else {\r\n\r\n                    // Nastavení chybové zprávy, při neshodě ověřovacího kódu\r\n                    let confirmationError = \"\";\r\n                    if (confirmationGenerated !== confirmationInput) {\r\n\r\n                        confirmationError = \"Ověřovací kód není správný\";\r\n                    }\r\n\r\n                    // Nastavení chybové zprávy, při nevybrání bankovního kódu\r\n                    let accountNumberError = data.accountNumber;\r\n                    if (this.state.payment.accountNumber.length >= 10 &&\r\n                        this.state.bankCode === \"\") {\r\n\r\n                        accountNumberError = \"Kód banky musí být zadán\";\r\n                    }\r\n\r\n                    // Změna stavu chybových zpráv\r\n                    this.setState({\r\n                        nameError: data.name,\r\n                        accountNumberError: accountNumberError,\r\n                        amountError: data.amount,\r\n                        variableSymbolError: data.variableSymbol,\r\n                        constantSymbolError: data.constantSymbol,\r\n                        specificSymbolError: data.specificSymbol,\r\n                        confirmationError: confirmationError,\r\n\r\n                        // Vygenerování nového kódu\r\n                        confirmationGenerated: Math.floor(Math.random() * (99999 - 10000 + 1) + 10000),\r\n                    });\r\n                }\r\n            }));\r\n        });\r\n    }\r\n\r\n// Změna stavu vstupních údajů /////////////////////////////////////////////////////\r\n\r\nhandleChange(event) {\r\n\r\n    const name = event.target.name;\r\n    let value = event.target.value;\r\n\r\n    // Uložení stavu do pomocných proměnných\r\n    if (name === \"accountNumberPrefix\" || name === \"confirmationInput\" || name === \"amountInput\") {\r\n        \r\n        // Změna desetinné značky (častka platby)\r\n        if (value.includes(\",\")) {\r\n\r\n            value = value.replace(\",\", \".\");\r\n        }\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n\r\n    } else {\r\n\r\n        // Získání směnného kurzu vybrané měny\r\n        if (name === \"currency\") {\r\n\r\n            // Request - vrací seznam aktuálních kurzů\r\n            fetch(\"https://api.exchangeratesapi.io/latest?base=\" + value)\r\n                .then(response => response.json().then(data => this.setState({\r\n                    exchangeRateToCZK: data.rates.CZK,\r\n            })));\r\n        }\r\n\r\n        this.setState({\r\n\r\n            payment: {\r\n                ...this.state.payment,\r\n                [name]: value,\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n// Vykreslení /////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n\r\n        // Přesměrování na stránku přehledu\r\n        if ( this.state.successfulPayment) {\r\n            return <Redirect to=\"/prehled\" />;\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}